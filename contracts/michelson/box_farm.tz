parameter (or (or (pair %add_fruits (list %rarity_list (pair (nat %index) (nat %token_id))) (list %tokens (pair (bytes %metadata) (nat %token_id)))) (or (list %add_merge_patterns (pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))))) (list %deseed (pair (nat %amount) (nat %token_id))))) (or (or (nat %harvest) (nat %merge)) (or (nat %plant_seeds) (list %water_plants nat))));
storage   (pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))));
code
  {
    # Private variable: can_water # pair @parameter @storage
    LAMBDA
      (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
      (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
      {
        UNPAIR;     # pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        SWAP;       # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
        # if ((sp.as_nat(sp.now - _x0.last_watered) > self.data.water_period) & (sp.as_nat(sp.now - _x0.last_watered) <= (2 * self.data.water_period))) & (_x0.times_watered < self.data.water_to_harvest): # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
        DUP;        # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
        DUG 2;      # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        GET 7;      # nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        SWAP;       # pair address (pair timestamp nat) : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        DUP;        # pair address (pair timestamp nat) : pair address (pair timestamp nat) : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        DUG 2;      # pair address (pair timestamp nat) : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        GET 3;      # timestamp : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        NOW;        # @now : timestamp : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        SUB;        # int : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        ISNAT;      # option nat : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        IF_NONE
          {
            PUSH int 391; # int : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            FAILWITH;   # FAILED
          }
          {}; # @some : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        COMPARE;    # int : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        GT;         # bool : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        IF
          {
            SWAP;       # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
            DUP;        # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
            DUG 2;      # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            GET 7;      # nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            PUSH nat 2; # nat : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            MUL;        # nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            SWAP;       # pair address (pair timestamp nat) : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            DUP;        # pair address (pair timestamp nat) : pair address (pair timestamp nat) : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            DUG 2;      # pair address (pair timestamp nat) : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            GET 3;      # timestamp : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            NOW;        # @now : timestamp : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            SUB;        # int : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            ISNAT;      # option nat : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            IF_NONE
              {
                PUSH int 391; # int : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
                FAILWITH;   # FAILED
              }
              {}; # @some : nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            COMPARE;    # int : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            LE;         # bool : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }
          {
            PUSH bool False; # bool : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }; # bool : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        IF
          {
            SWAP;       # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
            DUP;        # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat)
            DUG 2;      # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            GET 8;      # nat : pair address (pair timestamp nat) : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            SWAP;       # pair address (pair timestamp nat) : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            GET 4;      # nat : nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            COMPARE;    # int : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            LT;         # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }
          {
            DROP;       # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            PUSH bool False; # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }; # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        IF
          {
            # sp.result(True) # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            PUSH bool True; # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }
          {
            # sp.result(False) # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
            PUSH bool False; # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
          }; # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
        PAIR;       # pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))
      }; # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
    UNPAIR;     # @parameter : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            # == add_fruits ==
            # sp.verify(sp.sender == self.data.admin, 'NOT_AUTHORISED') # @storage : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            DUP;        # @storage : @storage : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            DUG 2;      # @storage : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            CAR;        # address : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            SENDER;     # @sender : address : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            COMPARE;    # int : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            EQ;         # bool : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            IF
              {}
              {
                PUSH string "NOT_AUTHORISED"; # string : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            # prev_index = sp.local("prev_index", 0) # @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            PUSH nat 0; # nat : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            SWAP;       # @parameter%add_fruits : nat : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            # for token in params.rarity_list: ... # @parameter%add_fruits : nat : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            DUP;        # @parameter%add_fruits : @parameter%add_fruits : nat : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            DUG 2;      # @parameter%add_fruits : nat : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            CAR;        # list (pair (nat %index) (nat %token_id)) : nat : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            ITER
              {
                # self.data.rarity_pairs[(prev_index.value, token.index)] = token.token_id # pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DIG 3;      # @storage : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                UNPAIR;     # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                UNPAIR;     # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                UNPAIR;     # map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 5;      # pair (nat %index) (nat %token_id) : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CDR;        # nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SOME;       # option nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 6;      # pair (nat %index) (nat %token_id) : option nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # nat : option nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : nat : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DIG 7;      # nat : nat : option nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR;       # pair nat nat : option nat : map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                UPDATE;     # map (pair nat nat) nat : pair (address %seed_token_address) (nat %seeds_per_box) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR;       # pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR;       # pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR;       # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : pair (nat %index) (nat %token_id) : @parameter%add_fruits : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUG 2;      # pair (nat %index) (nat %token_id) : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # prev_index.value = token.index # pair (nat %index) (nat %token_id) : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # nat : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
              }; # nat : @parameter%add_fruits : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
            DIG 3;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%add_fruits : @storage
            DROP;       # nat : @parameter%add_fruits : @storage
            # self.data.randomization_boundary = prev_index.value # nat : @parameter%add_fruits : @storage
            DIG 2;      # @storage : nat : @parameter%add_fruits
            UNPAIR;     # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            UNPAIR;     # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            SWAP;       # pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            UNPAIR;     # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            SWAP;       # pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            CAR;        # big_map nat (list (pair (nat %amount) (nat %token_id))) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : @parameter%add_fruits
            DIG 4;      # nat : big_map nat (list (pair (nat %amount) (nat %token_id))) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            SWAP;       # big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            PAIR;       # pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            SWAP;       # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            PAIR;       # pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            SWAP;       # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            PAIR;       # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_fruits
            PAIR;       # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : @parameter%add_fruits
            SWAP;       # @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            # sp.transfer(params.tokens, sp.tez(0), sp.contract(sp.TList(sp.TRecord(metadata = sp.TBytes, token_id = sp.TNat).layout(("metadata", "token_id"))), self.data.box_fruit_fa2_address, entry_point='add_token').open_some()) # @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            NIL operation; # list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            DUP 3;      # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat)) : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CDR;        # address : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CONTRACT %add_token (list (pair bytes nat)); # option (contract (list (pair bytes nat))) : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            IF_NONE
              {
                PUSH int 555; # int : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            PUSH mutez 0; # mutez : @some : list operation : @parameter%add_fruits : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            DIG 3;      # @parameter%add_fruits : mutez : @some : list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CDR;        # list (pair (bytes %metadata) (nat %token_id)) : mutez : @some : list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
            CONS;       # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # == add_merge_patterns ==
                # sp.verify(sp.sender == self.data.admin, 'NOT_AUTHORISED') # @storage : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @storage : @storage : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUG 2;      # @storage : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # address : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SENDER;     # @sender : address : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                COMPARE;    # int : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                EQ;         # bool : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_AUTHORISED"; # string : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # for pattern in params: ... # @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @parameter%add_merge_patterns : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                ITER
                  {
                    # sp.verify(~ (self.data.merge_patterns.contains(pattern.token_id)), 'MERGE_PATTERN_ALREADY_PRESENT') # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # @storage : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 5;      # big_map nat (list (pair (nat %amount) (nat %token_id))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUG 2;      # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # nat : big_map nat (list (pair (nat %amount) (nat %token_id))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    MEM;        # bool : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {
                        PUSH string "MERGE_PATTERN_ALREADY_PRESENT"; # string : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # self.data.merge_patterns[pattern.token_id] = pattern.tokens # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 2;      # @storage : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 6;      # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CDR;        # list (pair (nat %amount) (nat %token_id)) : big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SOME;       # option (list (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 6;      # pair (nat %token_id) (list %tokens (pair (nat %amount) (nat %token_id))) : option (list (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # nat : option (list (pair (nat %amount) (nat %token_id))) : big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UPDATE;     # big_map nat (list (pair (nat %amount) (nat %token_id))) : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : @parameter%add_merge_patterns : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # @parameter%add_merge_patterns : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # @parameter%add_merge_patterns : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DROP;       # @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @storage
                DROP;       # @storage
                NIL operation; # list operation : @storage
              }
              {
                DIG 2;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @parameter%deseed : @storage
                DROP;       # @parameter%deseed : @storage
                # == deseed ==
                # total_amount = sp.local("total_amount", 0) # @parameter%deseed : @storage
                PUSH nat 0; # nat : @parameter%deseed : @storage
                SWAP;       # @parameter%deseed : nat : @storage
                # for token in params: ... # @parameter%deseed : nat : @storage
                DUP;        # @parameter%deseed : @parameter%deseed : nat : @storage
                DUG 2;      # @parameter%deseed : nat : @parameter%deseed : @storage
                ITER
                  {
                    # total_amount.value += token.amount # pair (nat %amount) (nat %token_id) : nat : @parameter%deseed : @storage
                    CAR;        # nat : nat : @parameter%deseed : @storage
                    ADD;        # nat : @parameter%deseed : @storage
                  }; # nat : @parameter%deseed : @storage
                # sp.transfer(sp.record(address = sp.sender, tokens = params), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, tokens = sp.TList(sp.TRecord(amount = sp.TNat, token_id = sp.TNat).layout(("amount", "token_id")))).layout(("address", "tokens")), self.data.box_fruit_fa2_address, entry_point='burn').open_some()) # nat : @parameter%deseed : @storage
                NIL operation; # list operation : nat : @parameter%deseed : @storage
                DUP 4;      # @storage : list operation : nat : @parameter%deseed : @storage
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : list operation : nat : @parameter%deseed : @storage
                CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : list operation : nat : @parameter%deseed : @storage
                CDR;        # address : list operation : nat : @parameter%deseed : @storage
                CONTRACT %burn (pair address (list (pair nat nat))); # option (contract (pair address (list (pair nat nat)))) : list operation : nat : @parameter%deseed : @storage
                IF_NONE
                  {
                    PUSH int 457; # int : list operation : nat : @parameter%deseed : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : nat : @parameter%deseed : @storage
                PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%deseed : @storage
                DIG 4;      # @parameter%deseed : mutez : @some : list operation : nat : @storage
                SENDER;     # @sender : @parameter%deseed : mutez : @some : list operation : nat : @storage
                PAIR;       # pair @sender @parameter%deseed : mutez : @some : list operation : nat : @storage
                TRANSFER_TOKENS; # operation : list operation : nat : @storage
                CONS;       # list operation : nat : @storage
                # sp.transfer(sp.record(from_ = sp.self_address, to_ = sp.sender, value = total_amount.value * self.data.seeds_per_box), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.seed_token_address, entry_point='transfer').open_some()) # list operation : nat : @storage
                DUP 3;      # @storage : list operation : nat : @storage
                GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : list operation : nat : @storage
                GET 3;      # address : list operation : nat : @storage
                CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : nat : @storage
                IF_NONE
                  {
                    PUSH int 470; # int : list operation : nat : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : nat : @storage
                PUSH mutez 0; # mutez : @some : list operation : nat : @storage
                DUP 5;      # @storage : mutez : @some : list operation : nat : @storage
                GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : mutez : @some : list operation : nat : @storage
                GET 4;      # nat : mutez : @some : list operation : nat : @storage
                DIG 4;      # nat : nat : mutez : @some : list operation : @storage
                MUL;        # nat : mutez : @some : list operation : @storage
                SENDER;     # @sender : nat : mutez : @some : list operation : @storage
                SELF_ADDRESS; # @self : @sender : nat : mutez : @some : list operation : @storage
                PAIR 3;     # pair @self (pair @sender nat) : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # == harvest ==
                # sp.verify(self.data.boxes.contains(params), 'INVALID_BOX_ID') # @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @storage : @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUG 2;      # @storage : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @parameter%harvest : @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUG 2;      # @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                MEM;        # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INVALID_BOX_ID"; # string : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # sp.verify(self.data.boxes[params].creator == sp.sender, 'NOT_BOX_OWNER') # @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SENDER;     # @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # @storage : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET;        # option (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF_NONE
                  {
                    PUSH int 410; # int : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:410 # @some : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # @some : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # address : @sender : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                COMPARE;    # int : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                EQ;         # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_BOX_OWNER"; # string : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # sp.verify((self.data.boxes[params].times_watered == self.data.water_to_harvest) & (sp.as_nat(sp.now - self.data.boxes[params].last_watered) > self.data.water_period), 'CANNOT_HARVEST_YET') # @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @storage : @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 8;      # nat : @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # @storage : nat : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @storage : @storage : nat : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUG 3;      # @storage : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET;        # option (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF_NONE
                  {
                    PUSH int 415; # int : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:415 # @some : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # @some : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 4;      # nat : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                COMPARE;    # int : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                EQ;         # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF
                  {
                    SWAP;       # @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # @storage : @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 7;      # nat : @storage : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # @storage : nat : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # @storage : @storage : nat : @parameter%harvest : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUG 3;      # @storage : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # @parameter%harvest : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET;        # option (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 413; # int : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:413 # @some : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # @some : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 3;      # timestamp : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    NOW;        # @now : timestamp : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SUB;        # int : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    ISNAT;      # option nat : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 413; # int : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    COMPARE;    # int : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GT;         # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }
                  {
                    PUSH bool False; # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # bool : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "CANNOT_HARVEST_YET"; # string : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # create_contract_box_farm_421 = sp.local("create_contract_box_farm_421", create contract ...) # @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                UNIT;       # unit : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PUSH mutez 0; # mutez : unit : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                NONE key_hash; # option key_hash : mutez : unit : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CREATE_CONTRACT
                 { parameter unit;
                   storage   unit;
                   code
                     {
                       CDR;        # @storage
                       NIL operation; # list operation : @storage
                       PAIR;       # pair (list operation) @storage
                     }}; # operation : address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR;       # pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # token_id = sp.local("token_id", 0) # pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PUSH nat 0; # nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # for fruit_key in self.data.rarity_pairs.keys(): ... # nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 4;      # @storage : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CAR;        # map (pair nat nat) nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                ITER
                  {
                    CAR;        # pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # if (((({sp.bytes('0x00') : 0, sp.bytes('0x01') : 1, sp.bytes('0x02') : 2, sp.bytes('0x03') : 3, sp.bytes('0x04') : 4, sp.bytes('0x05') : 5, sp.bytes('0x06') : 6, sp.bytes('0x07') : 7, sp.bytes('0x08') : 8, sp.bytes('0x09') : 9, sp.bytes('0x0a') : 10, sp.bytes('0x0b') : 11, sp.bytes('0x0c') : 12, sp.bytes('0x0d') : 13, sp.bytes('0x0e') : 14, sp.bytes('0x0f') : 15, sp.bytes('0x10') : 16, sp.bytes('0x11') : 17, sp.bytes('0x12') : 18, sp.bytes('0x13') : 19, sp.bytes('0x14') : 20, sp.bytes('0x15') : 21, sp.bytes('0x16') : 22, sp.bytes('0x17') : 23, sp.bytes('0x18') : 24, sp.bytes('0x19') : 25, sp.bytes('0x1a') : 26, sp.bytes('0x1b') : 27, sp.bytes('0x1c') : 28, sp.bytes('0x1d') : 29, sp.bytes('0x1e') : 30, sp.bytes('0x1f') : 31, sp.bytes('0x20') : 32, sp.bytes('0x21') : 33, sp.bytes('0x22') : 34, sp.bytes('0x23') : 35, sp.bytes('0x24') : 36, sp.bytes('0x25') : 37, sp.bytes('0x26') : 38, sp.bytes('0x27') : 39, sp.bytes('0x28') : 40, sp.bytes('0x29') : 41, sp.bytes('0x2a') : 42, sp.bytes('0x2b') : 43, sp.bytes('0x2c') : 44, sp.bytes('0x2d') : 45, sp.bytes('0x2e') : 46, sp.bytes('0x2f') : 47, sp.bytes('0x30') : 48, sp.bytes('0x31') : 49, sp.bytes('0x32') : 50, sp.bytes('0x33') : 51, sp.bytes('0x34') : 52, sp.bytes('0x35') : 53, sp.bytes('0x36') : 54, sp.bytes('0x37') : 55, sp.bytes('0x38') : 56, sp.bytes('0x39') : 57, sp.bytes('0x3a') : 58, sp.bytes('0x3b') : 59, sp.bytes('0x3c') : 60, sp.bytes('0x3d') : 61, sp.bytes('0x3e') : 62, sp.bytes('0x3f') : 63, sp.bytes('0x40') : 64, sp.bytes('0x41') : 65, sp.bytes('0x42') : 66, sp.bytes('0x43') : 67, sp.bytes('0x44') : 68, sp.bytes('0x45') : 69, sp.bytes('0x46') : 70, sp.bytes('0x47') : 71, sp.bytes('0x48') : 72, sp.bytes('0x49') : 73, sp.bytes('0x4a') : 74, sp.bytes('0x4b') : 75, sp.bytes('0x4c') : 76, sp.bytes('0x4d') : 77, sp.bytes('0x4e') : 78, sp.bytes('0x4f') : 79, sp.bytes('0x50') : 80, sp.bytes('0x51') : 81, sp.bytes('0x52') : 82, sp.bytes('0x53') : 83, sp.bytes('0x54') : 84, sp.bytes('0x55') : 85, sp.bytes('0x56') : 86, sp.bytes('0x57') : 87, sp.bytes('0x58') : 88, sp.bytes('0x59') : 89, sp.bytes('0x5a') : 90, sp.bytes('0x5b') : 91, sp.bytes('0x5c') : 92, sp.bytes('0x5d') : 93, sp.bytes('0x5e') : 94, sp.bytes('0x5f') : 95, sp.bytes('0x60') : 96, sp.bytes('0x61') : 97, sp.bytes('0x62') : 98, sp.bytes('0x63') : 99, sp.bytes('0x64') : 100, sp.bytes('0x65') : 101, sp.bytes('0x66') : 102, sp.bytes('0x67') : 103, sp.bytes('0x68') : 104, sp.bytes('0x69') : 105, sp.bytes('0x6a') : 106, sp.bytes('0x6b') : 107, sp.bytes('0x6c') : 108, sp.bytes('0x6d') : 109, sp.bytes('0x6e') : 110, sp.bytes('0x6f') : 111, sp.bytes('0x70') : 112, sp.bytes('0x71') : 113, sp.bytes('0x72') : 114, sp.bytes('0x73') : 115, sp.bytes('0x74') : 116, sp.bytes('0x75') : 117, sp.bytes('0x76') : 118, sp.bytes('0x77') : 119, sp.bytes('0x78') : 120, sp.bytes('0x79') : 121, sp.bytes('0x7a') : 122, sp.bytes('0x7b') : 123, sp.bytes('0x7c') : 124, sp.bytes('0x7d') : 125, sp.bytes('0x7e') : 126, sp.bytes('0x7f') : 127, sp.bytes('0x80') : 128, sp.bytes('0x81') : 129, sp.bytes('0x82') : 130, sp.bytes('0x83') : 131, sp.bytes('0x84') : 132, sp.bytes('0x85') : 133, sp.bytes('0x86') : 134, sp.bytes('0x87') : 135, sp.bytes('0x88') : 136, sp.bytes('0x89') : 137, sp.bytes('0x8a') : 138, sp.bytes('0x8b') : 139, sp.bytes('0x8c') : 140, sp.bytes('0x8d') : 141, sp.bytes('0x8e') : 142, sp.bytes('0x8f') : 143, sp.bytes('0x90') : 144, sp.bytes('0x91') : 145, sp.bytes('0x92') : 146, sp.bytes('0x93') : 147, sp.bytes('0x94') : 148, sp.bytes('0x95') : 149, sp.bytes('0x96') : 150, sp.bytes('0x97') : 151, sp.bytes('0x98') : 152, sp.bytes('0x99') : 153, sp.bytes('0x9a') : 154, sp.bytes('0x9b') : 155, sp.bytes('0x9c') : 156, sp.bytes('0x9d') : 157, sp.bytes('0x9e') : 158, sp.bytes('0x9f') : 159, sp.bytes('0xa0') : 160, sp.bytes('0xa1') : 161, sp.bytes('0xa2') : 162, sp.bytes('0xa3') : 163, sp.bytes('0xa4') : 164, sp.bytes('0xa5') : 165, sp.bytes('0xa6') : 166, sp.bytes('0xa7') : 167, sp.bytes('0xa8') : 168, sp.bytes('0xa9') : 169, sp.bytes('0xaa') : 170, sp.bytes('0xab') : 171, sp.bytes('0xac') : 172, sp.bytes('0xad') : 173, sp.bytes('0xae') : 174, sp.bytes('0xaf') : 175, sp.bytes('0xb0') : 176, sp.bytes('0xb1') : 177, sp.bytes('0xb2') : 178, sp.bytes('0xb3') : 179, sp.bytes('0xb4') : 180, sp.bytes('0xb5') : 181, sp.bytes('0xb6') : 182, sp.bytes('0xb7') : 183, sp.bytes('0xb8') : 184, sp.bytes('0xb9') : 185, sp.bytes('0xba') : 186, sp.bytes('0xbb') : 187, sp.bytes('0xbc') : 188, sp.bytes('0xbd') : 189, sp.bytes('0xbe') : 190, sp.bytes('0xbf') : 191, sp.bytes('0xc0') : 192, sp.bytes('0xc1') : 193, sp.bytes('0xc2') : 194, sp.bytes('0xc3') : 195, sp.bytes('0xc4') : 196, sp.bytes('0xc5') : 197, sp.bytes('0xc6') : 198, sp.bytes('0xc7') : 199, sp.bytes('0xc8') : 200, sp.bytes('0xc9') : 201, sp.bytes('0xca') : 202, sp.bytes('0xcb') : 203, sp.bytes('0xcc') : 204, sp.bytes('0xcd') : 205, sp.bytes('0xce') : 206, sp.bytes('0xcf') : 207, sp.bytes('0xd0') : 208, sp.bytes('0xd1') : 209, sp.bytes('0xd2') : 210, sp.bytes('0xd3') : 211, sp.bytes('0xd4') : 212, sp.bytes('0xd5') : 213, sp.bytes('0xd6') : 214, sp.bytes('0xd7') : 215, sp.bytes('0xd8') : 216, sp.bytes('0xd9') : 217, sp.bytes('0xda') : 218, sp.bytes('0xdb') : 219, sp.bytes('0xdc') : 220, sp.bytes('0xdd') : 221, sp.bytes('0xde') : 222, sp.bytes('0xdf') : 223, sp.bytes('0xe0') : 224, sp.bytes('0xe1') : 225, sp.bytes('0xe2') : 226, sp.bytes('0xe3') : 227, sp.bytes('0xe4') : 228, sp.bytes('0xe5') : 229, sp.bytes('0xe6') : 230, sp.bytes('0xe7') : 231, sp.bytes('0xe8') : 232, sp.bytes('0xe9') : 233, sp.bytes('0xea') : 234, sp.bytes('0xeb') : 235, sp.bytes('0xec') : 236, sp.bytes('0xed') : 237, sp.bytes('0xee') : 238, sp.bytes('0xef') : 239, sp.bytes('0xf0') : 240, sp.bytes('0xf1') : 241, sp.bytes('0xf2') : 242, sp.bytes('0xf3') : 243, sp.bytes('0xf4') : 244, sp.bytes('0xf5') : 245, sp.bytes('0xf6') : 246, sp.bytes('0xf7') : 247, sp.bytes('0xf8') : 248, sp.bytes('0xf9') : 249, sp.bytes('0xfa') : 250, sp.bytes('0xfb') : 251, sp.bytes('0xfc') : 252, sp.bytes('0xfd') : 253, sp.bytes('0xfe') : 254, sp.bytes('0xff') : 255}[sp.slice(sp.sha256(sp.pack(create_contract_box_farm_421.value.address)), 30, 1).open_some()] * 256) + ({sp.bytes('0x00') : 0, sp.bytes('0x01') : 1, sp.bytes('0x02') : 2, sp.bytes('0x03') : 3, sp.bytes('0x04') : 4, sp.bytes('0x05') : 5, sp.bytes('0x06') : 6, sp.bytes('0x07') : 7, sp.bytes('0x08') : 8, sp.bytes('0x09') : 9, sp.bytes('0x0a') : 10, sp.bytes('0x0b') : 11, sp.bytes('0x0c') : 12, sp.bytes('0x0d') : 13, sp.bytes('0x0e') : 14, sp.bytes('0x0f') : 15, sp.bytes('0x10') : 16, sp.bytes('0x11') : 17, sp.bytes('0x12') : 18, sp.bytes('0x13') : 19, sp.bytes('0x14') : 20, sp.bytes('0x15') : 21, sp.bytes('0x16') : 22, sp.bytes('0x17') : 23, sp.bytes('0x18') : 24, sp.bytes('0x19') : 25, sp.bytes('0x1a') : 26, sp.bytes('0x1b') : 27, sp.bytes('0x1c') : 28, sp.bytes('0x1d') : 29, sp.bytes('0x1e') : 30, sp.bytes('0x1f') : 31, sp.bytes('0x20') : 32, sp.bytes('0x21') : 33, sp.bytes('0x22') : 34, sp.bytes('0x23') : 35, sp.bytes('0x24') : 36, sp.bytes('0x25') : 37, sp.bytes('0x26') : 38, sp.bytes('0x27') : 39, sp.bytes('0x28') : 40, sp.bytes('0x29') : 41, sp.bytes('0x2a') : 42, sp.bytes('0x2b') : 43, sp.bytes('0x2c') : 44, sp.bytes('0x2d') : 45, sp.bytes('0x2e') : 46, sp.bytes('0x2f') : 47, sp.bytes('0x30') : 48, sp.bytes('0x31') : 49, sp.bytes('0x32') : 50, sp.bytes('0x33') : 51, sp.bytes('0x34') : 52, sp.bytes('0x35') : 53, sp.bytes('0x36') : 54, sp.bytes('0x37') : 55, sp.bytes('0x38') : 56, sp.bytes('0x39') : 57, sp.bytes('0x3a') : 58, sp.bytes('0x3b') : 59, sp.bytes('0x3c') : 60, sp.bytes('0x3d') : 61, sp.bytes('0x3e') : 62, sp.bytes('0x3f') : 63, sp.bytes('0x40') : 64, sp.bytes('0x41') : 65, sp.bytes('0x42') : 66, sp.bytes('0x43') : 67, sp.bytes('0x44') : 68, sp.bytes('0x45') : 69, sp.bytes('0x46') : 70, sp.bytes('0x47') : 71, sp.bytes('0x48') : 72, sp.bytes('0x49') : 73, sp.bytes('0x4a') : 74, sp.bytes('0x4b') : 75, sp.bytes('0x4c') : 76, sp.bytes('0x4d') : 77, sp.bytes('0x4e') : 78, sp.bytes('0x4f') : 79, sp.bytes('0x50') : 80, sp.bytes('0x51') : 81, sp.bytes('0x52') : 82, sp.bytes('0x53') : 83, sp.bytes('0x54') : 84, sp.bytes('0x55') : 85, sp.bytes('0x56') : 86, sp.bytes('0x57') : 87, sp.bytes('0x58') : 88, sp.bytes('0x59') : 89, sp.bytes('0x5a') : 90, sp.bytes('0x5b') : 91, sp.bytes('0x5c') : 92, sp.bytes('0x5d') : 93, sp.bytes('0x5e') : 94, sp.bytes('0x5f') : 95, sp.bytes('0x60') : 96, sp.bytes('0x61') : 97, sp.bytes('0x62') : 98, sp.bytes('0x63') : 99, sp.bytes('0x64') : 100, sp.bytes('0x65') : 101, sp.bytes('0x66') : 102, sp.bytes('0x67') : 103, sp.bytes('0x68') : 104, sp.bytes('0x69') : 105, sp.bytes('0x6a') : 106, sp.bytes('0x6b') : 107, sp.bytes('0x6c') : 108, sp.bytes('0x6d') : 109, sp.bytes('0x6e') : 110, sp.bytes('0x6f') : 111, sp.bytes('0x70') : 112, sp.bytes('0x71') : 113, sp.bytes('0x72') : 114, sp.bytes('0x73') : 115, sp.bytes('0x74') : 116, sp.bytes('0x75') : 117, sp.bytes('0x76') : 118, sp.bytes('0x77') : 119, sp.bytes('0x78') : 120, sp.bytes('0x79') : 121, sp.bytes('0x7a') : 122, sp.bytes('0x7b') : 123, sp.bytes('0x7c') : 124, sp.bytes('0x7d') : 125, sp.bytes('0x7e') : 126, sp.bytes('0x7f') : 127, sp.bytes('0x80') : 128, sp.bytes('0x81') : 129, sp.bytes('0x82') : 130, sp.bytes('0x83') : 131, sp.bytes('0x84') : 132, sp.bytes('0x85') : 133, sp.bytes('0x86') : 134, sp.bytes('0x87') : 135, sp.bytes('0x88') : 136, sp.bytes('0x89') : 137, sp.bytes('0x8a') : 138, sp.bytes('0x8b') : 139, sp.bytes('0x8c') : 140, sp.bytes('0x8d') : 141, sp.bytes('0x8e') : 142, sp.bytes('0x8f') : 143, sp.bytes('0x90') : 144, sp.bytes('0x91') : 145, sp.bytes('0x92') : 146, sp.bytes('0x93') : 147, sp.bytes('0x94') : 148, sp.bytes('0x95') : 149, sp.bytes('0x96') : 150, sp.bytes('0x97') : 151, sp.bytes('0x98') : 152, sp.bytes('0x99') : 153, sp.bytes('0x9a') : 154, sp.bytes('0x9b') : 155, sp.bytes('0x9c') : 156, sp.bytes('0x9d') : 157, sp.bytes('0x9e') : 158, sp.bytes('0x9f') : 159, sp.bytes('0xa0') : 160, sp.bytes('0xa1') : 161, sp.bytes('0xa2') : 162, sp.bytes('0xa3') : 163, sp.bytes('0xa4') : 164, sp.bytes('0xa5') : 165, sp.bytes('0xa6') : 166, sp.bytes('0xa7') : 167, sp.bytes('0xa8') : 168, sp.bytes('0xa9') : 169, sp.bytes('0xaa') : 170, sp.bytes('0xab') : 171, sp.bytes('0xac') : 172, sp.bytes('0xad') : 173, sp.bytes('0xae') : 174, sp.bytes('0xaf') : 175, sp.bytes('0xb0') : 176, sp.bytes('0xb1') : 177, sp.bytes('0xb2') : 178, sp.bytes('0xb3') : 179, sp.bytes('0xb4') : 180, sp.bytes('0xb5') : 181, sp.bytes('0xb6') : 182, sp.bytes('0xb7') : 183, sp.bytes('0xb8') : 184, sp.bytes('0xb9') : 185, sp.bytes('0xba') : 186, sp.bytes('0xbb') : 187, sp.bytes('0xbc') : 188, sp.bytes('0xbd') : 189, sp.bytes('0xbe') : 190, sp.bytes('0xbf') : 191, sp.bytes('0xc0') : 192, sp.bytes('0xc1') : 193, sp.bytes('0xc2') : 194, sp.bytes('0xc3') : 195, sp.bytes('0xc4') : 196, sp.bytes('0xc5') : 197, sp.bytes('0xc6') : 198, sp.bytes('0xc7') : 199, sp.bytes('0xc8') : 200, sp.bytes('0xc9') : 201, sp.bytes('0xca') : 202, sp.bytes('0xcb') : 203, sp.bytes('0xcc') : 204, sp.bytes('0xcd') : 205, sp.bytes('0xce') : 206, sp.bytes('0xcf') : 207, sp.bytes('0xd0') : 208, sp.bytes('0xd1') : 209, sp.bytes('0xd2') : 210, sp.bytes('0xd3') : 211, sp.bytes('0xd4') : 212, sp.bytes('0xd5') : 213, sp.bytes('0xd6') : 214, sp.bytes('0xd7') : 215, sp.bytes('0xd8') : 216, sp.bytes('0xd9') : 217, sp.bytes('0xda') : 218, sp.bytes('0xdb') : 219, sp.bytes('0xdc') : 220, sp.bytes('0xdd') : 221, sp.bytes('0xde') : 222, sp.bytes('0xdf') : 223, sp.bytes('0xe0') : 224, sp.bytes('0xe1') : 225, sp.bytes('0xe2') : 226, sp.bytes('0xe3') : 227, sp.bytes('0xe4') : 228, sp.bytes('0xe5') : 229, sp.bytes('0xe6') : 230, sp.bytes('0xe7') : 231, sp.bytes('0xe8') : 232, sp.bytes('0xe9') : 233, sp.bytes('0xea') : 234, sp.bytes('0xeb') : 235, sp.bytes('0xec') : 236, sp.bytes('0xed') : 237, sp.bytes('0xee') : 238, sp.bytes('0xef') : 239, sp.bytes('0xf0') : 240, sp.bytes('0xf1') : 241, sp.bytes('0xf2') : 242, sp.bytes('0xf3') : 243, sp.bytes('0xf4') : 244, sp.bytes('0xf5') : 245, sp.bytes('0xf6') : 246, sp.bytes('0xf7') : 247, sp.bytes('0xf8') : 248, sp.bytes('0xf9') : 249, sp.bytes('0xfa') : 250, sp.bytes('0xfb') : 251, sp.bytes('0xfc') : 252, sp.bytes('0xfd') : 253, sp.bytes('0xfe') : 254, sp.bytes('0xff') : 255}[sp.slice(sp.sha256(sp.pack(create_contract_box_farm_421.value.address)), 31, 1).open_some()] * 256)) % self.data.randomization_boundary) >= sp.fst(fruit_key)) & (((({sp.bytes('0x00') : 0, sp.bytes('0x01') : 1, sp.bytes('0x02') : 2, sp.bytes('0x03') : 3, sp.bytes('0x04') : 4, sp.bytes('0x05') : 5, sp.bytes('0x06') : 6, sp.bytes('0x07') : 7, sp.bytes('0x08') : 8, sp.bytes('0x09') : 9, sp.bytes('0x0a') : 10, sp.bytes('0x0b') : 11, sp.bytes('0x0c') : 12, sp.bytes('0x0d') : 13, sp.bytes('0x0e') : 14, sp.bytes('0x0f') : 15, sp.bytes('0x10') : 16, sp.bytes('0x11') : 17, sp.bytes('0x12') : 18, sp.bytes('0x13') : 19, sp.bytes('0x14') : 20, sp.bytes('0x15') : 21, sp.bytes('0x16') : 22, sp.bytes('0x17') : 23, sp.bytes('0x18') : 24, sp.bytes('0x19') : 25, sp.bytes('0x1a') : 26, sp.bytes('0x1b') : 27, sp.bytes('0x1c') : 28, sp.bytes('0x1d') : 29, sp.bytes('0x1e') : 30, sp.bytes('0x1f') : 31, sp.bytes('0x20') : 32, sp.bytes('0x21') : 33, sp.bytes('0x22') : 34, sp.bytes('0x23') : 35, sp.bytes('0x24') : 36, sp.bytes('0x25') : 37, sp.bytes('0x26') : 38, sp.bytes('0x27') : 39, sp.bytes('0x28') : 40, sp.bytes('0x29') : 41, sp.bytes('0x2a') : 42, sp.bytes('0x2b') : 43, sp.bytes('0x2c') : 44, sp.bytes('0x2d') : 45, sp.bytes('0x2e') : 46, sp.bytes('0x2f') : 47, sp.bytes('0x30') : 48, sp.bytes('0x31') : 49, sp.bytes('0x32') : 50, sp.bytes('0x33') : 51, sp.bytes('0x34') : 52, sp.bytes('0x35') : 53, sp.bytes('0x36') : 54, sp.bytes('0x37') : 55, sp.bytes('0x38') : 56, sp.bytes('0x39') : 57, sp.bytes('0x3a') : 58, sp.bytes('0x3b') : 59, sp.bytes('0x3c') : 60, sp.bytes('0x3d') : 61, sp.bytes('0x3e') : 62, sp.bytes('0x3f') : 63, sp.bytes('0x40') : 64, sp.bytes('0x41') : 65, sp.bytes('0x42') : 66, sp.bytes('0x43') : 67, sp.bytes('0x44') : 68, sp.bytes('0x45') : 69, sp.bytes('0x46') : 70, sp.bytes('0x47') : 71, sp.bytes('0x48') : 72, sp.bytes('0x49') : 73, sp.bytes('0x4a') : 74, sp.bytes('0x4b') : 75, sp.bytes('0x4c') : 76, sp.bytes('0x4d') : 77, sp.bytes('0x4e') : 78, sp.bytes('0x4f') : 79, sp.bytes('0x50') : 80, sp.bytes('0x51') : 81, sp.bytes('0x52') : 82, sp.bytes('0x53') : 83, sp.bytes('0x54') : 84, sp.bytes('0x55') : 85, sp.bytes('0x56') : 86, sp.bytes('0x57') : 87, sp.bytes('0x58') : 88, sp.bytes('0x59') : 89, sp.bytes('0x5a') : 90, sp.bytes('0x5b') : 91, sp.bytes('0x5c') : 92, sp.bytes('0x5d') : 93, sp.bytes('0x5e') : 94, sp.bytes('0x5f') : 95, sp.bytes('0x60') : 96, sp.bytes('0x61') : 97, sp.bytes('0x62') : 98, sp.bytes('0x63') : 99, sp.bytes('0x64') : 100, sp.bytes('0x65') : 101, sp.bytes('0x66') : 102, sp.bytes('0x67') : 103, sp.bytes('0x68') : 104, sp.bytes('0x69') : 105, sp.bytes('0x6a') : 106, sp.bytes('0x6b') : 107, sp.bytes('0x6c') : 108, sp.bytes('0x6d') : 109, sp.bytes('0x6e') : 110, sp.bytes('0x6f') : 111, sp.bytes('0x70') : 112, sp.bytes('0x71') : 113, sp.bytes('0x72') : 114, sp.bytes('0x73') : 115, sp.bytes('0x74') : 116, sp.bytes('0x75') : 117, sp.bytes('0x76') : 118, sp.bytes('0x77') : 119, sp.bytes('0x78') : 120, sp.bytes('0x79') : 121, sp.bytes('0x7a') : 122, sp.bytes('0x7b') : 123, sp.bytes('0x7c') : 124, sp.bytes('0x7d') : 125, sp.bytes('0x7e') : 126, sp.bytes('0x7f') : 127, sp.bytes('0x80') : 128, sp.bytes('0x81') : 129, sp.bytes('0x82') : 130, sp.bytes('0x83') : 131, sp.bytes('0x84') : 132, sp.bytes('0x85') : 133, sp.bytes('0x86') : 134, sp.bytes('0x87') : 135, sp.bytes('0x88') : 136, sp.bytes('0x89') : 137, sp.bytes('0x8a') : 138, sp.bytes('0x8b') : 139, sp.bytes('0x8c') : 140, sp.bytes('0x8d') : 141, sp.bytes('0x8e') : 142, sp.bytes('0x8f') : 143, sp.bytes('0x90') : 144, sp.bytes('0x91') : 145, sp.bytes('0x92') : 146, sp.bytes('0x93') : 147, sp.bytes('0x94') : 148, sp.bytes('0x95') : 149, sp.bytes('0x96') : 150, sp.bytes('0x97') : 151, sp.bytes('0x98') : 152, sp.bytes('0x99') : 153, sp.bytes('0x9a') : 154, sp.bytes('0x9b') : 155, sp.bytes('0x9c') : 156, sp.bytes('0x9d') : 157, sp.bytes('0x9e') : 158, sp.bytes('0x9f') : 159, sp.bytes('0xa0') : 160, sp.bytes('0xa1') : 161, sp.bytes('0xa2') : 162, sp.bytes('0xa3') : 163, sp.bytes('0xa4') : 164, sp.bytes('0xa5') : 165, sp.bytes('0xa6') : 166, sp.bytes('0xa7') : 167, sp.bytes('0xa8') : 168, sp.bytes('0xa9') : 169, sp.bytes('0xaa') : 170, sp.bytes('0xab') : 171, sp.bytes('0xac') : 172, sp.bytes('0xad') : 173, sp.bytes('0xae') : 174, sp.bytes('0xaf') : 175, sp.bytes('0xb0') : 176, sp.bytes('0xb1') : 177, sp.bytes('0xb2') : 178, sp.bytes('0xb3') : 179, sp.bytes('0xb4') : 180, sp.bytes('0xb5') : 181, sp.bytes('0xb6') : 182, sp.bytes('0xb7') : 183, sp.bytes('0xb8') : 184, sp.bytes('0xb9') : 185, sp.bytes('0xba') : 186, sp.bytes('0xbb') : 187, sp.bytes('0xbc') : 188, sp.bytes('0xbd') : 189, sp.bytes('0xbe') : 190, sp.bytes('0xbf') : 191, sp.bytes('0xc0') : 192, sp.bytes('0xc1') : 193, sp.bytes('0xc2') : 194, sp.bytes('0xc3') : 195, sp.bytes('0xc4') : 196, sp.bytes('0xc5') : 197, sp.bytes('0xc6') : 198, sp.bytes('0xc7') : 199, sp.bytes('0xc8') : 200, sp.bytes('0xc9') : 201, sp.bytes('0xca') : 202, sp.bytes('0xcb') : 203, sp.bytes('0xcc') : 204, sp.bytes('0xcd') : 205, sp.bytes('0xce') : 206, sp.bytes('0xcf') : 207, sp.bytes('0xd0') : 208, sp.bytes('0xd1') : 209, sp.bytes('0xd2') : 210, sp.bytes('0xd3') : 211, sp.bytes('0xd4') : 212, sp.bytes('0xd5') : 213, sp.bytes('0xd6') : 214, sp.bytes('0xd7') : 215, sp.bytes('0xd8') : 216, sp.bytes('0xd9') : 217, sp.bytes('0xda') : 218, sp.bytes('0xdb') : 219, sp.bytes('0xdc') : 220, sp.bytes('0xdd') : 221, sp.bytes('0xde') : 222, sp.bytes('0xdf') : 223, sp.bytes('0xe0') : 224, sp.bytes('0xe1') : 225, sp.bytes('0xe2') : 226, sp.bytes('0xe3') : 227, sp.bytes('0xe4') : 228, sp.bytes('0xe5') : 229, sp.bytes('0xe6') : 230, sp.bytes('0xe7') : 231, sp.bytes('0xe8') : 232, sp.bytes('0xe9') : 233, sp.bytes('0xea') : 234, sp.bytes('0xeb') : 235, sp.bytes('0xec') : 236, sp.bytes('0xed') : 237, sp.bytes('0xee') : 238, sp.bytes('0xef') : 239, sp.bytes('0xf0') : 240, sp.bytes('0xf1') : 241, sp.bytes('0xf2') : 242, sp.bytes('0xf3') : 243, sp.bytes('0xf4') : 244, sp.bytes('0xf5') : 245, sp.bytes('0xf6') : 246, sp.bytes('0xf7') : 247, sp.bytes('0xf8') : 248, sp.bytes('0xf9') : 249, sp.bytes('0xfa') : 250, sp.bytes('0xfb') : 251, sp.bytes('0xfc') : 252, sp.bytes('0xfd') : 253, sp.bytes('0xfe') : 254, sp.bytes('0xff') : 255}[sp.slice(sp.sha256(sp.pack(create_contract_box_farm_421.value.address)), 30, 1).open_some()] * 256) + ({sp.bytes('0x00') : 0, sp.bytes('0x01') : 1, sp.bytes('0x02') : 2, sp.bytes('0x03') : 3, sp.bytes('0x04') : 4, sp.bytes('0x05') : 5, sp.bytes('0x06') : 6, sp.bytes('0x07') : 7, sp.bytes('0x08') : 8, sp.bytes('0x09') : 9, sp.bytes('0x0a') : 10, sp.bytes('0x0b') : 11, sp.bytes('0x0c') : 12, sp.bytes('0x0d') : 13, sp.bytes('0x0e') : 14, sp.bytes('0x0f') : 15, sp.bytes('0x10') : 16, sp.bytes('0x11') : 17, sp.bytes('0x12') : 18, sp.bytes('0x13') : 19, sp.bytes('0x14') : 20, sp.bytes('0x15') : 21, sp.bytes('0x16') : 22, sp.bytes('0x17') : 23, sp.bytes('0x18') : 24, sp.bytes('0x19') : 25, sp.bytes('0x1a') : 26, sp.bytes('0x1b') : 27, sp.bytes('0x1c') : 28, sp.bytes('0x1d') : 29, sp.bytes('0x1e') : 30, sp.bytes('0x1f') : 31, sp.bytes('0x20') : 32, sp.bytes('0x21') : 33, sp.bytes('0x22') : 34, sp.bytes('0x23') : 35, sp.bytes('0x24') : 36, sp.bytes('0x25') : 37, sp.bytes('0x26') : 38, sp.bytes('0x27') : 39, sp.bytes('0x28') : 40, sp.bytes('0x29') : 41, sp.bytes('0x2a') : 42, sp.bytes('0x2b') : 43, sp.bytes('0x2c') : 44, sp.bytes('0x2d') : 45, sp.bytes('0x2e') : 46, sp.bytes('0x2f') : 47, sp.bytes('0x30') : 48, sp.bytes('0x31') : 49, sp.bytes('0x32') : 50, sp.bytes('0x33') : 51, sp.bytes('0x34') : 52, sp.bytes('0x35') : 53, sp.bytes('0x36') : 54, sp.bytes('0x37') : 55, sp.bytes('0x38') : 56, sp.bytes('0x39') : 57, sp.bytes('0x3a') : 58, sp.bytes('0x3b') : 59, sp.bytes('0x3c') : 60, sp.bytes('0x3d') : 61, sp.bytes('0x3e') : 62, sp.bytes('0x3f') : 63, sp.bytes('0x40') : 64, sp.bytes('0x41') : 65, sp.bytes('0x42') : 66, sp.bytes('0x43') : 67, sp.bytes('0x44') : 68, sp.bytes('0x45') : 69, sp.bytes('0x46') : 70, sp.bytes('0x47') : 71, sp.bytes('0x48') : 72, sp.bytes('0x49') : 73, sp.bytes('0x4a') : 74, sp.bytes('0x4b') : 75, sp.bytes('0x4c') : 76, sp.bytes('0x4d') : 77, sp.bytes('0x4e') : 78, sp.bytes('0x4f') : 79, sp.bytes('0x50') : 80, sp.bytes('0x51') : 81, sp.bytes('0x52') : 82, sp.bytes('0x53') : 83, sp.bytes('0x54') : 84, sp.bytes('0x55') : 85, sp.bytes('0x56') : 86, sp.bytes('0x57') : 87, sp.bytes('0x58') : 88, sp.bytes('0x59') : 89, sp.bytes('0x5a') : 90, sp.bytes('0x5b') : 91, sp.bytes('0x5c') : 92, sp.bytes('0x5d') : 93, sp.bytes('0x5e') : 94, sp.bytes('0x5f') : 95, sp.bytes('0x60') : 96, sp.bytes('0x61') : 97, sp.bytes('0x62') : 98, sp.bytes('0x63') : 99, sp.bytes('0x64') : 100, sp.bytes('0x65') : 101, sp.bytes('0x66') : 102, sp.bytes('0x67') : 103, sp.bytes('0x68') : 104, sp.bytes('0x69') : 105, sp.bytes('0x6a') : 106, sp.bytes('0x6b') : 107, sp.bytes('0x6c') : 108, sp.bytes('0x6d') : 109, sp.bytes('0x6e') : 110, sp.bytes('0x6f') : 111, sp.bytes('0x70') : 112, sp.bytes('0x71') : 113, sp.bytes('0x72') : 114, sp.bytes('0x73') : 115, sp.bytes('0x74') : 116, sp.bytes('0x75') : 117, sp.bytes('0x76') : 118, sp.bytes('0x77') : 119, sp.bytes('0x78') : 120, sp.bytes('0x79') : 121, sp.bytes('0x7a') : 122, sp.bytes('0x7b') : 123, sp.bytes('0x7c') : 124, sp.bytes('0x7d') : 125, sp.bytes('0x7e') : 126, sp.bytes('0x7f') : 127, sp.bytes('0x80') : 128, sp.bytes('0x81') : 129, sp.bytes('0x82') : 130, sp.bytes('0x83') : 131, sp.bytes('0x84') : 132, sp.bytes('0x85') : 133, sp.bytes('0x86') : 134, sp.bytes('0x87') : 135, sp.bytes('0x88') : 136, sp.bytes('0x89') : 137, sp.bytes('0x8a') : 138, sp.bytes('0x8b') : 139, sp.bytes('0x8c') : 140, sp.bytes('0x8d') : 141, sp.bytes('0x8e') : 142, sp.bytes('0x8f') : 143, sp.bytes('0x90') : 144, sp.bytes('0x91') : 145, sp.bytes('0x92') : 146, sp.bytes('0x93') : 147, sp.bytes('0x94') : 148, sp.bytes('0x95') : 149, sp.bytes('0x96') : 150, sp.bytes('0x97') : 151, sp.bytes('0x98') : 152, sp.bytes('0x99') : 153, sp.bytes('0x9a') : 154, sp.bytes('0x9b') : 155, sp.bytes('0x9c') : 156, sp.bytes('0x9d') : 157, sp.bytes('0x9e') : 158, sp.bytes('0x9f') : 159, sp.bytes('0xa0') : 160, sp.bytes('0xa1') : 161, sp.bytes('0xa2') : 162, sp.bytes('0xa3') : 163, sp.bytes('0xa4') : 164, sp.bytes('0xa5') : 165, sp.bytes('0xa6') : 166, sp.bytes('0xa7') : 167, sp.bytes('0xa8') : 168, sp.bytes('0xa9') : 169, sp.bytes('0xaa') : 170, sp.bytes('0xab') : 171, sp.bytes('0xac') : 172, sp.bytes('0xad') : 173, sp.bytes('0xae') : 174, sp.bytes('0xaf') : 175, sp.bytes('0xb0') : 176, sp.bytes('0xb1') : 177, sp.bytes('0xb2') : 178, sp.bytes('0xb3') : 179, sp.bytes('0xb4') : 180, sp.bytes('0xb5') : 181, sp.bytes('0xb6') : 182, sp.bytes('0xb7') : 183, sp.bytes('0xb8') : 184, sp.bytes('0xb9') : 185, sp.bytes('0xba') : 186, sp.bytes('0xbb') : 187, sp.bytes('0xbc') : 188, sp.bytes('0xbd') : 189, sp.bytes('0xbe') : 190, sp.bytes('0xbf') : 191, sp.bytes('0xc0') : 192, sp.bytes('0xc1') : 193, sp.bytes('0xc2') : 194, sp.bytes('0xc3') : 195, sp.bytes('0xc4') : 196, sp.bytes('0xc5') : 197, sp.bytes('0xc6') : 198, sp.bytes('0xc7') : 199, sp.bytes('0xc8') : 200, sp.bytes('0xc9') : 201, sp.bytes('0xca') : 202, sp.bytes('0xcb') : 203, sp.bytes('0xcc') : 204, sp.bytes('0xcd') : 205, sp.bytes('0xce') : 206, sp.bytes('0xcf') : 207, sp.bytes('0xd0') : 208, sp.bytes('0xd1') : 209, sp.bytes('0xd2') : 210, sp.bytes('0xd3') : 211, sp.bytes('0xd4') : 212, sp.bytes('0xd5') : 213, sp.bytes('0xd6') : 214, sp.bytes('0xd7') : 215, sp.bytes('0xd8') : 216, sp.bytes('0xd9') : 217, sp.bytes('0xda') : 218, sp.bytes('0xdb') : 219, sp.bytes('0xdc') : 220, sp.bytes('0xdd') : 221, sp.bytes('0xde') : 222, sp.bytes('0xdf') : 223, sp.bytes('0xe0') : 224, sp.bytes('0xe1') : 225, sp.bytes('0xe2') : 226, sp.bytes('0xe3') : 227, sp.bytes('0xe4') : 228, sp.bytes('0xe5') : 229, sp.bytes('0xe6') : 230, sp.bytes('0xe7') : 231, sp.bytes('0xe8') : 232, sp.bytes('0xe9') : 233, sp.bytes('0xea') : 234, sp.bytes('0xeb') : 235, sp.bytes('0xec') : 236, sp.bytes('0xed') : 237, sp.bytes('0xee') : 238, sp.bytes('0xef') : 239, sp.bytes('0xf0') : 240, sp.bytes('0xf1') : 241, sp.bytes('0xf2') : 242, sp.bytes('0xf3') : 243, sp.bytes('0xf4') : 244, sp.bytes('0xf5') : 245, sp.bytes('0xf6') : 246, sp.bytes('0xf7') : 247, sp.bytes('0xf8') : 248, sp.bytes('0xf9') : 249, sp.bytes('0xfa') : 250, sp.bytes('0xfb') : 251, sp.bytes('0xfc') : 252, sp.bytes('0xfd') : 253, sp.bytes('0xfe') : 254, sp.bytes('0xff') : 255}[sp.slice(sp.sha256(sp.pack(create_contract_box_farm_421.value.address)), 31, 1).open_some()] * 256)) % self.data.randomization_boundary) < sp.snd(fruit_key)): # pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # pair nat nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 6;      # @storage : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 6;      # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 256; # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH (map bytes nat) {Elt 0x00 0; Elt 0x01 1; Elt 0x02 2; Elt 0x03 3; Elt 0x04 4; Elt 0x05 5; Elt 0x06 6; Elt 0x07 7; Elt 0x08 8; Elt 0x09 9; Elt 0x0a 10; Elt 0x0b 11; Elt 0x0c 12; Elt 0x0d 13; Elt 0x0e 14; Elt 0x0f 15; Elt 0x10 16; Elt 0x11 17; Elt 0x12 18; Elt 0x13 19; Elt 0x14 20; Elt 0x15 21; Elt 0x16 22; Elt 0x17 23; Elt 0x18 24; Elt 0x19 25; Elt 0x1a 26; Elt 0x1b 27; Elt 0x1c 28; Elt 0x1d 29; Elt 0x1e 30; Elt 0x1f 31; Elt 0x20 32; Elt 0x21 33; Elt 0x22 34; Elt 0x23 35; Elt 0x24 36; Elt 0x25 37; Elt 0x26 38; Elt 0x27 39; Elt 0x28 40; Elt 0x29 41; Elt 0x2a 42; Elt 0x2b 43; Elt 0x2c 44; Elt 0x2d 45; Elt 0x2e 46; Elt 0x2f 47; Elt 0x30 48; Elt 0x31 49; Elt 0x32 50; Elt 0x33 51; Elt 0x34 52; Elt 0x35 53; Elt 0x36 54; Elt 0x37 55; Elt 0x38 56; Elt 0x39 57; Elt 0x3a 58; Elt 0x3b 59; Elt 0x3c 60; Elt 0x3d 61; Elt 0x3e 62; Elt 0x3f 63; Elt 0x40 64; Elt 0x41 65; Elt 0x42 66; Elt 0x43 67; Elt 0x44 68; Elt 0x45 69; Elt 0x46 70; Elt 0x47 71; Elt 0x48 72; Elt 0x49 73; Elt 0x4a 74; Elt 0x4b 75; Elt 0x4c 76; Elt 0x4d 77; Elt 0x4e 78; Elt 0x4f 79; Elt 0x50 80; Elt 0x51 81; Elt 0x52 82; Elt 0x53 83; Elt 0x54 84; Elt 0x55 85; Elt 0x56 86; Elt 0x57 87; Elt 0x58 88; Elt 0x59 89; Elt 0x5a 90; Elt 0x5b 91; Elt 0x5c 92; Elt 0x5d 93; Elt 0x5e 94; Elt 0x5f 95; Elt 0x60 96; Elt 0x61 97; Elt 0x62 98; Elt 0x63 99; Elt 0x64 100; Elt 0x65 101; Elt 0x66 102; Elt 0x67 103; Elt 0x68 104; Elt 0x69 105; Elt 0x6a 106; Elt 0x6b 107; Elt 0x6c 108; Elt 0x6d 109; Elt 0x6e 110; Elt 0x6f 111; Elt 0x70 112; Elt 0x71 113; Elt 0x72 114; Elt 0x73 115; Elt 0x74 116; Elt 0x75 117; Elt 0x76 118; Elt 0x77 119; Elt 0x78 120; Elt 0x79 121; Elt 0x7a 122; Elt 0x7b 123; Elt 0x7c 124; Elt 0x7d 125; Elt 0x7e 126; Elt 0x7f 127; Elt 0x80 128; Elt 0x81 129; Elt 0x82 130; Elt 0x83 131; Elt 0x84 132; Elt 0x85 133; Elt 0x86 134; Elt 0x87 135; Elt 0x88 136; Elt 0x89 137; Elt 0x8a 138; Elt 0x8b 139; Elt 0x8c 140; Elt 0x8d 141; Elt 0x8e 142; Elt 0x8f 143; Elt 0x90 144; Elt 0x91 145; Elt 0x92 146; Elt 0x93 147; Elt 0x94 148; Elt 0x95 149; Elt 0x96 150; Elt 0x97 151; Elt 0x98 152; Elt 0x99 153; Elt 0x9a 154; Elt 0x9b 155; Elt 0x9c 156; Elt 0x9d 157; Elt 0x9e 158; Elt 0x9f 159; Elt 0xa0 160; Elt 0xa1 161; Elt 0xa2 162; Elt 0xa3 163; Elt 0xa4 164; Elt 0xa5 165; Elt 0xa6 166; Elt 0xa7 167; Elt 0xa8 168; Elt 0xa9 169; Elt 0xaa 170; Elt 0xab 171; Elt 0xac 172; Elt 0xad 173; Elt 0xae 174; Elt 0xaf 175; Elt 0xb0 176; Elt 0xb1 177; Elt 0xb2 178; Elt 0xb3 179; Elt 0xb4 180; Elt 0xb5 181; Elt 0xb6 182; Elt 0xb7 183; Elt 0xb8 184; Elt 0xb9 185; Elt 0xba 186; Elt 0xbb 187; Elt 0xbc 188; Elt 0xbd 189; Elt 0xbe 190; Elt 0xbf 191; Elt 0xc0 192; Elt 0xc1 193; Elt 0xc2 194; Elt 0xc3 195; Elt 0xc4 196; Elt 0xc5 197; Elt 0xc6 198; Elt 0xc7 199; Elt 0xc8 200; Elt 0xc9 201; Elt 0xca 202; Elt 0xcb 203; Elt 0xcc 204; Elt 0xcd 205; Elt 0xce 206; Elt 0xcf 207; Elt 0xd0 208; Elt 0xd1 209; Elt 0xd2 210; Elt 0xd3 211; Elt 0xd4 212; Elt 0xd5 213; Elt 0xd6 214; Elt 0xd7 215; Elt 0xd8 216; Elt 0xd9 217; Elt 0xda 218; Elt 0xdb 219; Elt 0xdc 220; Elt 0xdd 221; Elt 0xde 222; Elt 0xdf 223; Elt 0xe0 224; Elt 0xe1 225; Elt 0xe2 226; Elt 0xe3 227; Elt 0xe4 228; Elt 0xe5 229; Elt 0xe6 230; Elt 0xe7 231; Elt 0xe8 232; Elt 0xe9 233; Elt 0xea 234; Elt 0xeb 235; Elt 0xec 236; Elt 0xed 237; Elt 0xee 238; Elt 0xef 239; Elt 0xf0 240; Elt 0xf1 241; Elt 0xf2 242; Elt 0xf3 243; Elt 0xf4 244; Elt 0xf5 245; Elt 0xf6 246; Elt 0xf7 247; Elt 0xf8 248; Elt 0xf9 249; Elt 0xfa 250; Elt 0xfb 251; Elt 0xfc 252; Elt 0xfd 253; Elt 0xfe 254; Elt 0xff 255}; # map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 7;      # pair operation address : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CDR;        # address : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PACK;       # bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SHA256;     # bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 1; # nat : bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 31; # nat : nat : bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SLICE;      # option bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 424; # int : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET;        # option nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 425; # int : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:425 # @some : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # @some : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    MUL;        # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 256; # nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH (map bytes nat) {Elt 0x00 0; Elt 0x01 1; Elt 0x02 2; Elt 0x03 3; Elt 0x04 4; Elt 0x05 5; Elt 0x06 6; Elt 0x07 7; Elt 0x08 8; Elt 0x09 9; Elt 0x0a 10; Elt 0x0b 11; Elt 0x0c 12; Elt 0x0d 13; Elt 0x0e 14; Elt 0x0f 15; Elt 0x10 16; Elt 0x11 17; Elt 0x12 18; Elt 0x13 19; Elt 0x14 20; Elt 0x15 21; Elt 0x16 22; Elt 0x17 23; Elt 0x18 24; Elt 0x19 25; Elt 0x1a 26; Elt 0x1b 27; Elt 0x1c 28; Elt 0x1d 29; Elt 0x1e 30; Elt 0x1f 31; Elt 0x20 32; Elt 0x21 33; Elt 0x22 34; Elt 0x23 35; Elt 0x24 36; Elt 0x25 37; Elt 0x26 38; Elt 0x27 39; Elt 0x28 40; Elt 0x29 41; Elt 0x2a 42; Elt 0x2b 43; Elt 0x2c 44; Elt 0x2d 45; Elt 0x2e 46; Elt 0x2f 47; Elt 0x30 48; Elt 0x31 49; Elt 0x32 50; Elt 0x33 51; Elt 0x34 52; Elt 0x35 53; Elt 0x36 54; Elt 0x37 55; Elt 0x38 56; Elt 0x39 57; Elt 0x3a 58; Elt 0x3b 59; Elt 0x3c 60; Elt 0x3d 61; Elt 0x3e 62; Elt 0x3f 63; Elt 0x40 64; Elt 0x41 65; Elt 0x42 66; Elt 0x43 67; Elt 0x44 68; Elt 0x45 69; Elt 0x46 70; Elt 0x47 71; Elt 0x48 72; Elt 0x49 73; Elt 0x4a 74; Elt 0x4b 75; Elt 0x4c 76; Elt 0x4d 77; Elt 0x4e 78; Elt 0x4f 79; Elt 0x50 80; Elt 0x51 81; Elt 0x52 82; Elt 0x53 83; Elt 0x54 84; Elt 0x55 85; Elt 0x56 86; Elt 0x57 87; Elt 0x58 88; Elt 0x59 89; Elt 0x5a 90; Elt 0x5b 91; Elt 0x5c 92; Elt 0x5d 93; Elt 0x5e 94; Elt 0x5f 95; Elt 0x60 96; Elt 0x61 97; Elt 0x62 98; Elt 0x63 99; Elt 0x64 100; Elt 0x65 101; Elt 0x66 102; Elt 0x67 103; Elt 0x68 104; Elt 0x69 105; Elt 0x6a 106; Elt 0x6b 107; Elt 0x6c 108; Elt 0x6d 109; Elt 0x6e 110; Elt 0x6f 111; Elt 0x70 112; Elt 0x71 113; Elt 0x72 114; Elt 0x73 115; Elt 0x74 116; Elt 0x75 117; Elt 0x76 118; Elt 0x77 119; Elt 0x78 120; Elt 0x79 121; Elt 0x7a 122; Elt 0x7b 123; Elt 0x7c 124; Elt 0x7d 125; Elt 0x7e 126; Elt 0x7f 127; Elt 0x80 128; Elt 0x81 129; Elt 0x82 130; Elt 0x83 131; Elt 0x84 132; Elt 0x85 133; Elt 0x86 134; Elt 0x87 135; Elt 0x88 136; Elt 0x89 137; Elt 0x8a 138; Elt 0x8b 139; Elt 0x8c 140; Elt 0x8d 141; Elt 0x8e 142; Elt 0x8f 143; Elt 0x90 144; Elt 0x91 145; Elt 0x92 146; Elt 0x93 147; Elt 0x94 148; Elt 0x95 149; Elt 0x96 150; Elt 0x97 151; Elt 0x98 152; Elt 0x99 153; Elt 0x9a 154; Elt 0x9b 155; Elt 0x9c 156; Elt 0x9d 157; Elt 0x9e 158; Elt 0x9f 159; Elt 0xa0 160; Elt 0xa1 161; Elt 0xa2 162; Elt 0xa3 163; Elt 0xa4 164; Elt 0xa5 165; Elt 0xa6 166; Elt 0xa7 167; Elt 0xa8 168; Elt 0xa9 169; Elt 0xaa 170; Elt 0xab 171; Elt 0xac 172; Elt 0xad 173; Elt 0xae 174; Elt 0xaf 175; Elt 0xb0 176; Elt 0xb1 177; Elt 0xb2 178; Elt 0xb3 179; Elt 0xb4 180; Elt 0xb5 181; Elt 0xb6 182; Elt 0xb7 183; Elt 0xb8 184; Elt 0xb9 185; Elt 0xba 186; Elt 0xbb 187; Elt 0xbc 188; Elt 0xbd 189; Elt 0xbe 190; Elt 0xbf 191; Elt 0xc0 192; Elt 0xc1 193; Elt 0xc2 194; Elt 0xc3 195; Elt 0xc4 196; Elt 0xc5 197; Elt 0xc6 198; Elt 0xc7 199; Elt 0xc8 200; Elt 0xc9 201; Elt 0xca 202; Elt 0xcb 203; Elt 0xcc 204; Elt 0xcd 205; Elt 0xce 206; Elt 0xcf 207; Elt 0xd0 208; Elt 0xd1 209; Elt 0xd2 210; Elt 0xd3 211; Elt 0xd4 212; Elt 0xd5 213; Elt 0xd6 214; Elt 0xd7 215; Elt 0xd8 216; Elt 0xd9 217; Elt 0xda 218; Elt 0xdb 219; Elt 0xdc 220; Elt 0xdd 221; Elt 0xde 222; Elt 0xdf 223; Elt 0xe0 224; Elt 0xe1 225; Elt 0xe2 226; Elt 0xe3 227; Elt 0xe4 228; Elt 0xe5 229; Elt 0xe6 230; Elt 0xe7 231; Elt 0xe8 232; Elt 0xe9 233; Elt 0xea 234; Elt 0xeb 235; Elt 0xec 236; Elt 0xed 237; Elt 0xee 238; Elt 0xef 239; Elt 0xf0 240; Elt 0xf1 241; Elt 0xf2 242; Elt 0xf3 243; Elt 0xf4 244; Elt 0xf5 245; Elt 0xf6 246; Elt 0xf7 247; Elt 0xf8 248; Elt 0xf9 249; Elt 0xfa 250; Elt 0xfb 251; Elt 0xfc 252; Elt 0xfd 253; Elt 0xfe 254; Elt 0xff 255}; # map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 8;      # pair operation address : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CDR;        # address : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PACK;       # bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SHA256;     # bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 1; # nat : bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 30; # nat : nat : bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SLICE;      # option bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 423; # int : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET;        # option nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 425; # int : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:425 # @some : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # @some : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    MUL;        # nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    ADD;        # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    EDIV;       # option (pair nat nat) : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 426; # int : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CDR;        # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    COMPARE;    # int : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GE;         # bool : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {
                        DUP;        # pair nat nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        CDR;        # nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP 6;      # @storage : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET 6;      # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 256; # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH (map bytes nat) {Elt 0x00 0; Elt 0x01 1; Elt 0x02 2; Elt 0x03 3; Elt 0x04 4; Elt 0x05 5; Elt 0x06 6; Elt 0x07 7; Elt 0x08 8; Elt 0x09 9; Elt 0x0a 10; Elt 0x0b 11; Elt 0x0c 12; Elt 0x0d 13; Elt 0x0e 14; Elt 0x0f 15; Elt 0x10 16; Elt 0x11 17; Elt 0x12 18; Elt 0x13 19; Elt 0x14 20; Elt 0x15 21; Elt 0x16 22; Elt 0x17 23; Elt 0x18 24; Elt 0x19 25; Elt 0x1a 26; Elt 0x1b 27; Elt 0x1c 28; Elt 0x1d 29; Elt 0x1e 30; Elt 0x1f 31; Elt 0x20 32; Elt 0x21 33; Elt 0x22 34; Elt 0x23 35; Elt 0x24 36; Elt 0x25 37; Elt 0x26 38; Elt 0x27 39; Elt 0x28 40; Elt 0x29 41; Elt 0x2a 42; Elt 0x2b 43; Elt 0x2c 44; Elt 0x2d 45; Elt 0x2e 46; Elt 0x2f 47; Elt 0x30 48; Elt 0x31 49; Elt 0x32 50; Elt 0x33 51; Elt 0x34 52; Elt 0x35 53; Elt 0x36 54; Elt 0x37 55; Elt 0x38 56; Elt 0x39 57; Elt 0x3a 58; Elt 0x3b 59; Elt 0x3c 60; Elt 0x3d 61; Elt 0x3e 62; Elt 0x3f 63; Elt 0x40 64; Elt 0x41 65; Elt 0x42 66; Elt 0x43 67; Elt 0x44 68; Elt 0x45 69; Elt 0x46 70; Elt 0x47 71; Elt 0x48 72; Elt 0x49 73; Elt 0x4a 74; Elt 0x4b 75; Elt 0x4c 76; Elt 0x4d 77; Elt 0x4e 78; Elt 0x4f 79; Elt 0x50 80; Elt 0x51 81; Elt 0x52 82; Elt 0x53 83; Elt 0x54 84; Elt 0x55 85; Elt 0x56 86; Elt 0x57 87; Elt 0x58 88; Elt 0x59 89; Elt 0x5a 90; Elt 0x5b 91; Elt 0x5c 92; Elt 0x5d 93; Elt 0x5e 94; Elt 0x5f 95; Elt 0x60 96; Elt 0x61 97; Elt 0x62 98; Elt 0x63 99; Elt 0x64 100; Elt 0x65 101; Elt 0x66 102; Elt 0x67 103; Elt 0x68 104; Elt 0x69 105; Elt 0x6a 106; Elt 0x6b 107; Elt 0x6c 108; Elt 0x6d 109; Elt 0x6e 110; Elt 0x6f 111; Elt 0x70 112; Elt 0x71 113; Elt 0x72 114; Elt 0x73 115; Elt 0x74 116; Elt 0x75 117; Elt 0x76 118; Elt 0x77 119; Elt 0x78 120; Elt 0x79 121; Elt 0x7a 122; Elt 0x7b 123; Elt 0x7c 124; Elt 0x7d 125; Elt 0x7e 126; Elt 0x7f 127; Elt 0x80 128; Elt 0x81 129; Elt 0x82 130; Elt 0x83 131; Elt 0x84 132; Elt 0x85 133; Elt 0x86 134; Elt 0x87 135; Elt 0x88 136; Elt 0x89 137; Elt 0x8a 138; Elt 0x8b 139; Elt 0x8c 140; Elt 0x8d 141; Elt 0x8e 142; Elt 0x8f 143; Elt 0x90 144; Elt 0x91 145; Elt 0x92 146; Elt 0x93 147; Elt 0x94 148; Elt 0x95 149; Elt 0x96 150; Elt 0x97 151; Elt 0x98 152; Elt 0x99 153; Elt 0x9a 154; Elt 0x9b 155; Elt 0x9c 156; Elt 0x9d 157; Elt 0x9e 158; Elt 0x9f 159; Elt 0xa0 160; Elt 0xa1 161; Elt 0xa2 162; Elt 0xa3 163; Elt 0xa4 164; Elt 0xa5 165; Elt 0xa6 166; Elt 0xa7 167; Elt 0xa8 168; Elt 0xa9 169; Elt 0xaa 170; Elt 0xab 171; Elt 0xac 172; Elt 0xad 173; Elt 0xae 174; Elt 0xaf 175; Elt 0xb0 176; Elt 0xb1 177; Elt 0xb2 178; Elt 0xb3 179; Elt 0xb4 180; Elt 0xb5 181; Elt 0xb6 182; Elt 0xb7 183; Elt 0xb8 184; Elt 0xb9 185; Elt 0xba 186; Elt 0xbb 187; Elt 0xbc 188; Elt 0xbd 189; Elt 0xbe 190; Elt 0xbf 191; Elt 0xc0 192; Elt 0xc1 193; Elt 0xc2 194; Elt 0xc3 195; Elt 0xc4 196; Elt 0xc5 197; Elt 0xc6 198; Elt 0xc7 199; Elt 0xc8 200; Elt 0xc9 201; Elt 0xca 202; Elt 0xcb 203; Elt 0xcc 204; Elt 0xcd 205; Elt 0xce 206; Elt 0xcf 207; Elt 0xd0 208; Elt 0xd1 209; Elt 0xd2 210; Elt 0xd3 211; Elt 0xd4 212; Elt 0xd5 213; Elt 0xd6 214; Elt 0xd7 215; Elt 0xd8 216; Elt 0xd9 217; Elt 0xda 218; Elt 0xdb 219; Elt 0xdc 220; Elt 0xdd 221; Elt 0xde 222; Elt 0xdf 223; Elt 0xe0 224; Elt 0xe1 225; Elt 0xe2 226; Elt 0xe3 227; Elt 0xe4 228; Elt 0xe5 229; Elt 0xe6 230; Elt 0xe7 231; Elt 0xe8 232; Elt 0xe9 233; Elt 0xea 234; Elt 0xeb 235; Elt 0xec 236; Elt 0xed 237; Elt 0xee 238; Elt 0xef 239; Elt 0xf0 240; Elt 0xf1 241; Elt 0xf2 242; Elt 0xf3 243; Elt 0xf4 244; Elt 0xf5 245; Elt 0xf6 246; Elt 0xf7 247; Elt 0xf8 248; Elt 0xf9 249; Elt 0xfa 250; Elt 0xfb 251; Elt 0xfc 252; Elt 0xfd 253; Elt 0xfe 254; Elt 0xff 255}; # map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP 7;      # pair operation address : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        CDR;        # address : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PACK;       # bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SHA256;     # bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 1; # nat : bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 31; # nat : nat : bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SLICE;      # option bytes : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 424; # int : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map bytes nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET;        # option nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 425; # int : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:425 # @some : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                          }; # @some : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        MUL;        # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 256; # nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH (map bytes nat) {Elt 0x00 0; Elt 0x01 1; Elt 0x02 2; Elt 0x03 3; Elt 0x04 4; Elt 0x05 5; Elt 0x06 6; Elt 0x07 7; Elt 0x08 8; Elt 0x09 9; Elt 0x0a 10; Elt 0x0b 11; Elt 0x0c 12; Elt 0x0d 13; Elt 0x0e 14; Elt 0x0f 15; Elt 0x10 16; Elt 0x11 17; Elt 0x12 18; Elt 0x13 19; Elt 0x14 20; Elt 0x15 21; Elt 0x16 22; Elt 0x17 23; Elt 0x18 24; Elt 0x19 25; Elt 0x1a 26; Elt 0x1b 27; Elt 0x1c 28; Elt 0x1d 29; Elt 0x1e 30; Elt 0x1f 31; Elt 0x20 32; Elt 0x21 33; Elt 0x22 34; Elt 0x23 35; Elt 0x24 36; Elt 0x25 37; Elt 0x26 38; Elt 0x27 39; Elt 0x28 40; Elt 0x29 41; Elt 0x2a 42; Elt 0x2b 43; Elt 0x2c 44; Elt 0x2d 45; Elt 0x2e 46; Elt 0x2f 47; Elt 0x30 48; Elt 0x31 49; Elt 0x32 50; Elt 0x33 51; Elt 0x34 52; Elt 0x35 53; Elt 0x36 54; Elt 0x37 55; Elt 0x38 56; Elt 0x39 57; Elt 0x3a 58; Elt 0x3b 59; Elt 0x3c 60; Elt 0x3d 61; Elt 0x3e 62; Elt 0x3f 63; Elt 0x40 64; Elt 0x41 65; Elt 0x42 66; Elt 0x43 67; Elt 0x44 68; Elt 0x45 69; Elt 0x46 70; Elt 0x47 71; Elt 0x48 72; Elt 0x49 73; Elt 0x4a 74; Elt 0x4b 75; Elt 0x4c 76; Elt 0x4d 77; Elt 0x4e 78; Elt 0x4f 79; Elt 0x50 80; Elt 0x51 81; Elt 0x52 82; Elt 0x53 83; Elt 0x54 84; Elt 0x55 85; Elt 0x56 86; Elt 0x57 87; Elt 0x58 88; Elt 0x59 89; Elt 0x5a 90; Elt 0x5b 91; Elt 0x5c 92; Elt 0x5d 93; Elt 0x5e 94; Elt 0x5f 95; Elt 0x60 96; Elt 0x61 97; Elt 0x62 98; Elt 0x63 99; Elt 0x64 100; Elt 0x65 101; Elt 0x66 102; Elt 0x67 103; Elt 0x68 104; Elt 0x69 105; Elt 0x6a 106; Elt 0x6b 107; Elt 0x6c 108; Elt 0x6d 109; Elt 0x6e 110; Elt 0x6f 111; Elt 0x70 112; Elt 0x71 113; Elt 0x72 114; Elt 0x73 115; Elt 0x74 116; Elt 0x75 117; Elt 0x76 118; Elt 0x77 119; Elt 0x78 120; Elt 0x79 121; Elt 0x7a 122; Elt 0x7b 123; Elt 0x7c 124; Elt 0x7d 125; Elt 0x7e 126; Elt 0x7f 127; Elt 0x80 128; Elt 0x81 129; Elt 0x82 130; Elt 0x83 131; Elt 0x84 132; Elt 0x85 133; Elt 0x86 134; Elt 0x87 135; Elt 0x88 136; Elt 0x89 137; Elt 0x8a 138; Elt 0x8b 139; Elt 0x8c 140; Elt 0x8d 141; Elt 0x8e 142; Elt 0x8f 143; Elt 0x90 144; Elt 0x91 145; Elt 0x92 146; Elt 0x93 147; Elt 0x94 148; Elt 0x95 149; Elt 0x96 150; Elt 0x97 151; Elt 0x98 152; Elt 0x99 153; Elt 0x9a 154; Elt 0x9b 155; Elt 0x9c 156; Elt 0x9d 157; Elt 0x9e 158; Elt 0x9f 159; Elt 0xa0 160; Elt 0xa1 161; Elt 0xa2 162; Elt 0xa3 163; Elt 0xa4 164; Elt 0xa5 165; Elt 0xa6 166; Elt 0xa7 167; Elt 0xa8 168; Elt 0xa9 169; Elt 0xaa 170; Elt 0xab 171; Elt 0xac 172; Elt 0xad 173; Elt 0xae 174; Elt 0xaf 175; Elt 0xb0 176; Elt 0xb1 177; Elt 0xb2 178; Elt 0xb3 179; Elt 0xb4 180; Elt 0xb5 181; Elt 0xb6 182; Elt 0xb7 183; Elt 0xb8 184; Elt 0xb9 185; Elt 0xba 186; Elt 0xbb 187; Elt 0xbc 188; Elt 0xbd 189; Elt 0xbe 190; Elt 0xbf 191; Elt 0xc0 192; Elt 0xc1 193; Elt 0xc2 194; Elt 0xc3 195; Elt 0xc4 196; Elt 0xc5 197; Elt 0xc6 198; Elt 0xc7 199; Elt 0xc8 200; Elt 0xc9 201; Elt 0xca 202; Elt 0xcb 203; Elt 0xcc 204; Elt 0xcd 205; Elt 0xce 206; Elt 0xcf 207; Elt 0xd0 208; Elt 0xd1 209; Elt 0xd2 210; Elt 0xd3 211; Elt 0xd4 212; Elt 0xd5 213; Elt 0xd6 214; Elt 0xd7 215; Elt 0xd8 216; Elt 0xd9 217; Elt 0xda 218; Elt 0xdb 219; Elt 0xdc 220; Elt 0xdd 221; Elt 0xde 222; Elt 0xdf 223; Elt 0xe0 224; Elt 0xe1 225; Elt 0xe2 226; Elt 0xe3 227; Elt 0xe4 228; Elt 0xe5 229; Elt 0xe6 230; Elt 0xe7 231; Elt 0xe8 232; Elt 0xe9 233; Elt 0xea 234; Elt 0xeb 235; Elt 0xec 236; Elt 0xed 237; Elt 0xee 238; Elt 0xef 239; Elt 0xf0 240; Elt 0xf1 241; Elt 0xf2 242; Elt 0xf3 243; Elt 0xf4 244; Elt 0xf5 245; Elt 0xf6 246; Elt 0xf7 247; Elt 0xf8 248; Elt 0xf9 249; Elt 0xfa 250; Elt 0xfb 251; Elt 0xfc 252; Elt 0xfd 253; Elt 0xfe 254; Elt 0xff 255}; # map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP 8;      # pair operation address : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        CDR;        # address : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PACK;       # bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SHA256;     # bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 1; # nat : bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 30; # nat : nat : bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SLICE;      # option bytes : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 423; # int : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map bytes nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET;        # option nat : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 425; # int : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:425 # @some : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                          }; # @some : nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        MUL;        # nat : nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        ADD;        # nat : nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        EDIV;       # option (pair nat nat) : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 426; # int : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            CDR;        # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                          }; # nat : nat : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        COMPARE;    # int : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        LT;         # bool : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }
                      {
                        PUSH bool False; # bool : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # bool : pair nat nat : nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {
                        SWAP;       # nat : pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DROP;       # pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        # token_id.value = self.data.rarity_pairs[fruit_key] # pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP 4;      # @storage : pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        CAR;        # map (pair nat nat) nat : pair nat nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # pair nat nat : map (pair nat nat) nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET;        # option nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 434; # int : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:434 # @some : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                          }; # @some : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }
                      {
                        DROP;       # nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # nat : pair operation address : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # pair operation address : nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DROP;       # nat : @parameter%harvest : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DIG 3;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%harvest : @storage
                DROP;       # nat : @parameter%harvest : @storage
                # sp.transfer(sp.record(address = sp.sender, token_id = token_id.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, token_id = sp.TNat).layout(("address", "token_id")), self.data.box_fruit_fa2_address, entry_point='mint').open_some()) # nat : @parameter%harvest : @storage
                NIL operation; # list operation : nat : @parameter%harvest : @storage
                DUP 4;      # @storage : list operation : nat : @parameter%harvest : @storage
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : list operation : nat : @parameter%harvest : @storage
                CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : list operation : nat : @parameter%harvest : @storage
                CDR;        # address : list operation : nat : @parameter%harvest : @storage
                CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : nat : @parameter%harvest : @storage
                IF_NONE
                  {
                    PUSH int 437; # int : list operation : nat : @parameter%harvest : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : nat : @parameter%harvest : @storage
                PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%harvest : @storage
                DIG 3;      # nat : mutez : @some : list operation : @parameter%harvest : @storage
                SENDER;     # @sender : nat : mutez : @some : list operation : @parameter%harvest : @storage
                PAIR;       # pair @sender nat : mutez : @some : list operation : @parameter%harvest : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%harvest : @storage
                CONS;       # list operation : @parameter%harvest : @storage
                # del self.data.boxes[params] # list operation : @parameter%harvest : @storage
                DIG 2;      # @storage : list operation : @parameter%harvest
                UNPAIR;     # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation : @parameter%harvest
                UNPAIR;     # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation : @parameter%harvest
                SWAP;       # pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation : @parameter%harvest
                UNPAIR;     # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation : @parameter%harvest
                NONE (pair address (pair timestamp nat)); # option (pair address (pair timestamp nat)) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation : @parameter%harvest
                DIG 6;      # @parameter%harvest : option (pair address (pair timestamp nat)) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation
                UPDATE;     # big_map nat (pair address (pair timestamp nat)) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation
                PAIR;       # pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation
                SWAP;       # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation
                PAIR;       # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : list operation
                PAIR;       # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
              }
              {
                DIG 2;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @parameter%merge : @storage
                DROP;       # @parameter%merge : @storage
                # == merge ==
                # sp.transfer(sp.record(address = sp.sender, tokens = self.data.merge_patterns[params]), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, tokens = sp.TList(sp.TRecord(amount = sp.TNat, token_id = sp.TNat).layout(("amount", "token_id")))).layout(("address", "tokens")), self.data.box_fruit_fa2_address, entry_point='burn').open_some()) # @parameter%merge : @storage
                NIL operation; # list operation : @parameter%merge : @storage
                DUP 3;      # @storage : list operation : @parameter%merge : @storage
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : list operation : @parameter%merge : @storage
                CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : list operation : @parameter%merge : @storage
                CDR;        # address : list operation : @parameter%merge : @storage
                CONTRACT %burn (pair address (list (pair nat nat))); # option (contract (pair address (list (pair nat nat)))) : list operation : @parameter%merge : @storage
                IF_NONE
                  {
                    PUSH int 495; # int : list operation : @parameter%merge : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%merge : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%merge : @storage
                DUP 5;      # @storage : mutez : @some : list operation : @parameter%merge : @storage
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : mutez : @some : list operation : @parameter%merge : @storage
                GET 5;      # big_map nat (list (pair (nat %amount) (nat %token_id))) : mutez : @some : list operation : @parameter%merge : @storage
                DUP 5;      # @parameter%merge : big_map nat (list (pair (nat %amount) (nat %token_id))) : mutez : @some : list operation : @parameter%merge : @storage
                GET;        # option (list (pair (nat %amount) (nat %token_id))) : mutez : @some : list operation : @parameter%merge : @storage
                IF_NONE
                  {
                    PUSH int 508; # int : mutez : @some : list operation : @parameter%merge : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:508 # @some : mutez : @some : list operation : @parameter%merge : @storage
                  }; # @some : mutez : @some : list operation : @parameter%merge : @storage
                SENDER;     # @sender : @some : mutez : @some : list operation : @parameter%merge : @storage
                PAIR;       # pair @sender @some : mutez : @some : list operation : @parameter%merge : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%merge : @storage
                CONS;       # list operation : @parameter%merge : @storage
                # sp.transfer(sp.record(address = sp.sender, token_id = params), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, token_id = sp.TNat).layout(("address", "token_id")), self.data.box_fruit_fa2_address, entry_point='mint').open_some()) # list operation : @parameter%merge : @storage
                DUP 3;      # @storage : list operation : @parameter%merge : @storage
                CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : list operation : @parameter%merge : @storage
                CAR;        # pair (address %admin) (address %box_fruit_fa2_address) : list operation : @parameter%merge : @storage
                CDR;        # address : list operation : @parameter%merge : @storage
                CONTRACT %mint (pair address nat); # option (contract (pair address nat)) : list operation : @parameter%merge : @storage
                IF_NONE
                  {
                    PUSH int 515; # int : list operation : @parameter%merge : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%merge : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%merge : @storage
                DIG 3;      # @parameter%merge : mutez : @some : list operation : @storage
                SENDER;     # @sender : @parameter%merge : mutez : @some : list operation : @storage
                PAIR;       # pair @sender @parameter%merge : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
          }
          {
            IF_LEFT
              {
                # == plant_seeds ==
                # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = self.data.seeds_per_box * params), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.seed_token_address, entry_point='transfer').open_some()) # @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                NIL operation; # list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # @storage : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # address : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                IF_NONE
                  {
                    PUSH int 346; # int : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 4;      # @parameter%plant_seeds : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 6;      # @storage : @parameter%plant_seeds : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 3;      # pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box)) : @parameter%plant_seeds : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GET 4;      # nat : @parameter%plant_seeds : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                MUL;        # nat : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SELF_ADDRESS; # @self : nat : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SENDER;     # @sender : @self : nat : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PAIR 3;     # pair @sender (pair @self nat) : mutez : @some : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                TRANSFER_TOKENS; # operation : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                CONS;       # list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                # for _ in sp.range(1, params + 1): ... (sp.TNat) # list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PUSH nat 1; # nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # @parameter%plant_seeds : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                ADD;        # nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                PUSH nat 1; # nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # nat : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP 3;      # nat : nat : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                COMPARE;    # int : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                GT;         # bool : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                LOOP
                  {
                    # self.data.uid += 1 # nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 4;      # @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # @storage : @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 5;      # nat : @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 1; # nat : nat : @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    ADD;        # nat : @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UPDATE 5;   # @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # self.data.boxes[self.data.uid] = sp.record(creator = sp.sender, last_watered = sp.now, times_watered = 1) # @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # @storage : @storage : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUG 5;      # @storage : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 1; # nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    NOW;        # @now : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SENDER;     # @sender : @now : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR 3;     # pair @sender (pair @now nat) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SOME;       # option (pair @sender (pair @now nat)) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 9;      # @storage : option (pair @sender (pair @now nat)) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 5;      # nat : option (pair @sender (pair @now nat)) : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UPDATE;     # big_map nat (pair address (pair timestamp nat)) : pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (address %admin) (address %box_fruit_fa2_address) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # pair (address %admin) (address %box_fruit_fa2_address) : pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : nat : nat : list operation : @parameter%plant_seeds : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUG 4;      # nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # loop step # nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PUSH nat 1; # nat : nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    ADD;        # nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # nat : nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # nat : nat : nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    COMPARE;    # int : nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GT;         # bool : nat : nat : list operation : @parameter%plant_seeds : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # nat : nat : list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DROP 2;     # list operation : @parameter%plant_seeds : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # @parameter%plant_seeds : list operation : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DROP;       # list operation : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DIG 2;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : list operation : @storage
                DROP;       # list operation : @storage
              }
              {
                # == water_plants ==
                # for box_id in params: ... # @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DUP;        # @parameter%water_plants : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                ITER
                  {
                    # sp.verify(self.data.boxes.contains(box_id), 'INVALID_BOX_ID') # nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # @storage : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP;        # nat : nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUG 2;      # nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    MEM;        # bool : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {}
                      {
                        PUSH string "INVALID_BOX_ID"; # string : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # sp.verify(self.data.boxes[box_id].creator == sp.sender, 'NOT_BOX_OWNER') # nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SENDER;     # @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 4;      # @storage : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET;        # option (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 378; # int : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:378 # @some : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # @some : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # address : @sender : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    COMPARE;    # int : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    EQ;         # bool : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {}
                      {
                        PUSH string "NOT_BOX_OWNER"; # string : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    # if self.can_water(self.data.boxes[box_id]): # nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 4;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 4;      # @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    CAR;        # pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map %boxes nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered)))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET 3;      # big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DUP 3;      # nat : big_map nat (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    GET;        # option (pair (address %creator) (pair (timestamp %last_watered) (nat %times_watered))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF_NONE
                      {
                        PUSH int 380; # int : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:380 # @some : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # @some : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    SWAP;       # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @some : nat : @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 4;      # @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @some : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 2;      # @some : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    PAIR;       # pair @some @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    EXEC;       # pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    UNPAIR;     # bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    DIG 4;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : bool : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : nat : @parameter%water_plants
                    DIG 2;      # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : bool : nat : @parameter%water_plants
                    DUG 4;      # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : bool : nat : @parameter%water_plants : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))
                    DUG 4;      # bool : nat : @parameter%water_plants : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                    IF
                      {
                        # self.data.boxes[box_id].last_watered = sp.now # nat : @parameter%water_plants : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DIG 2;      # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UNPAIR;     # pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat)) : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UNPAIR;     # pair address address : pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat) : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat) : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UNPAIR;     # big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP;        # big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP 6;      # nat : big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP;        # nat : nat : big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUG 2;      # nat : big_map nat (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET;        # option (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 384; # int : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        NOW;        # @now : @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UPDATE 3;   # @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SOME;       # option (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # nat : option (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UPDATE;     # big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        # self.data.boxes[box_id].times_watered += 1 # big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP;        # big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : nat : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DIG 5;      # nat : big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP;        # nat : nat : big_map nat (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUG 2;      # nat : big_map nat (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET;        # option (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        IF_NONE
                          {
                            PUSH int 385; # int : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        DUP;        # @some : @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        GET 4;      # nat : @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PUSH nat 1; # nat : nat : @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        ADD;        # nat : @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UPDATE 4;   # @some : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SOME;       # option (pair address (pair timestamp nat)) : nat : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # nat : option (pair address (pair timestamp nat)) : big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        UPDATE;     # big_map nat (pair address (pair timestamp nat)) : pair (big_map nat (list (pair nat nat))) nat : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PAIR;       # pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat) : pair address address : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # pair address address : pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat) : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PAIR;       # pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat)) : pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        PAIR;       # pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : @parameter%water_plants : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                        SWAP;       # @parameter%water_plants : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }
                      {
                        DROP;       # @parameter%water_plants : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                      }; # list nat : pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))) : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                  }; # @parameter%water_plants : @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                DROP;       # @storage : lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat)))))
                SWAP;       # lambda (pair (pair address (pair timestamp nat)) (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) (pair bool (pair (pair (pair address address) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair nat nat))) nat))) (pair (pair (map (pair nat nat) nat) (pair address nat)) (pair nat (pair nat nat))))) : @storage
                DROP;       # @storage
                NIL operation; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map %merge_patterns nat (list (pair (nat %amount) (nat %token_id)))) (nat %randomization_boundary)))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
      }; # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
    NIL operation; # list operation : list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
    SWAP;       # list operation : list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
      }; # list operation : pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest))))
    PAIR;       # pair (list operation) (pair (pair (pair (address %admin) (address %box_fruit_fa2_address)) (pair (big_map nat (pair address (pair timestamp nat))) (pair (big_map nat (list (pair (nat %amount) (nat %token_id)))) nat))) (pair (pair (map %rarity_pairs (pair nat nat) nat) (pair (address %seed_token_address) (nat %seeds_per_box))) (pair (nat %uid) (pair (nat %water_period) (nat %water_to_harvest)))))
  };